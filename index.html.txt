<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Our Love Story - PWA</title>

    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#FFC0CB">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Love Story">
    <!-- IMPORTANT: Ensure you have an actual icon-192x192.png file in your root directory -->
    <link rel="apple-touch-icon" href="/icon-192x192.png">

    <!-- Link to your Web App Manifest -->
    <link rel="manifest" href="/manifest.json">

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <style>
      body {
        font-family: 'Inter', sans-serif;
      }
      h1 {
        font-family: 'Playfair Display', serif;
      }
    </style>

    <!-- React and ReactDOM CDNs -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <!-- Babel for JSX transformation in browser (for development/demo purposes) -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the Canvas environment
        // For external hosting (like GitHub Pages), these will be undefined initially.
        // The app will fall back to 'default-app-id' and anonymous sign-in.
        // If you need specific Firebase config or auth token for your deployed app,
        // you would hardcode them here (NOT RECOMMENDED for production keys) or
        // use environment variables during a build process. For this simple PWA,
        // anonymous sign-in with default-app-id is sufficient for shared data.
        window.__firebase_config = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        window.__app_id = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        window.__initial_auth_token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Make Firebase functions globally available for the React component
        window.firebase = {
            initializeApp,
            getAuth,
            signInAnonymously,
            signInWithCustomToken,
            onAuthStateChanged,
            getFirestore,
            collection,
            addDoc,
            onSnapshot,
            query,
            orderBy,
            serverTimestamp
        };

        // Register the Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                    .then(registration => {
                        console.log('Service Worker registered with scope:', registration.scope);
                    })
                    .catch(error => {
                        console.error('Service Worker registration failed:', error);
                    });
            });
        }
    </script>
</head>
<body>
    <div id="root"></div>

    <!-- Your React App Component -->
    <script type="text/babel">
        const { useState, useEffect } = React;
        const { initializeApp, getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp } = window.firebase;

        // Ensure these global variables are defined by the environment
        const firebaseConfig = window.__firebase_config;
        const appId = window.__app_id;
        const initialAuthToken = window.__initial_auth_token;

        function App() {
          const [db, setDb] = useState(null);
          const [auth, setAuth] = useState(null);
          const [userId, setUserId] = useState('');
          const [memories, setMemories] = useState([]);
          const [newMemory, setNewMemory] = useState('');
          const [loading, setLoading] = useState(true);
          const [error, setError] = useState(null);
          const [isAuthReady, setIsAuthReady] = useState(false);
          const [currentDateIdea, setCurrentDateIdea] = useState('');

          // Predefined romantic date ideas
          const dateIdeas = [
            "Have a romantic picnic in the park.",
            "Cook a special dinner together at home.",
            "Go stargazing and talk about your dreams.",
            "Have a themed movie night with cozy blankets.",
            "Visit a local art gallery or museum.",
            "Go for a long walk and discover new places.",
            "Have a board game night with your favorite snacks.",
            "Create a shared playlist of your favorite songs.",
            "Write love letters to each other.",
            "Plan a surprise day trip to a nearby town.",
            "Have a relaxing spa night at home.",
            "Go on a dessert crawl, trying treats from different bakeries.",
            "Volunteer together for a cause you both care about.",
            "Have a 'yes' day where you say yes to all reasonable requests.",
            "Build a fort and watch a movie inside.",
            "Try a new hobby or class together (e.g., pottery, dance).",
            "Have a photoshoot together in a scenic location.",
            "Go to a live music show or concert.",
            "Recreate your first date.",
            "Have a DIY cocktail/mocktail making session."
          ];

          useEffect(() => {
            // Initialize Firebase services
            try {
              const app = initializeApp(firebaseConfig);
              const firestore = getFirestore(app);
              const authentication = getAuth(app);
              setDb(firestore);
              setAuth(authentication);

              // Listen for authentication state changes
              const unsubscribeAuth = onAuthStateChanged(authentication, async (user) => {
                if (user) {
                  setUserId(user.uid);
                  setIsAuthReady(true);
                  console.log("User authenticated:", user.uid);
                } else {
                  // Sign in anonymously if no user is found or initialAuthToken is not provided
                  try {
                    if (initialAuthToken) {
                      await signInWithCustomToken(authentication, initialAuthToken);
                      console.log("Signed in with custom token.");
                    } else {
                      await signInAnonymously(authentication);
                      console.log("Signed in anonymously.");
                    }
                  } catch (e) {
                    console.error("Error during anonymous or custom token sign-in:", e);
                    setError("Failed to authenticate. Please try again.");
                    setLoading(false);
                  }
                }
                setLoading(false); // Authentication check is complete
              });

              return () => unsubscribeAuth(); // Clean up auth listener on unmount
            } catch (e) {
              console.error("Error initializing Firebase:", e);
              setError("Failed to initialize the app. Check Firebase config.");
              setLoading(false);
            }
          }, []); // Run once on component mount

          useEffect(() => {
            // Fetch memories only when db and userId are ready
            if (db && isAuthReady) {
              const memoriesCollectionRef = collection(db, `artifacts/${appId}/public/data/memories`);
              // Order memories by timestamp, newest first
              const q = query(memoriesCollectionRef, orderBy('timestamp', 'desc'));

              const unsubscribe = onSnapshot(q, (snapshot) => {
                const fetchedMemories = snapshot.docs.map(doc => ({
                  id: doc.id,
                  ...doc.data()
                }));
                setMemories(fetchedMemories);
                console.log("Memories updated:", fetchedMemories);
              }, (e) => {
                console.error("Error fetching memories:", e);
                setError("Failed to load memories.");
              });

              return () => unsubscribe(); // Clean up snapshot listener on unmount
            }
          }, [db, isAuthReady]); // Re-run when db or isAuthReady changes

          const handleAddMemory = async () => {
            if (newMemory.trim() === '' || !db || !userId) {
              console.warn("Cannot add empty memory or Firebase not ready.");
              return;
            }

            try {
              const memoriesCollectionRef = collection(db, `artifacts/${appId}/public/data/memories`);
              await addDoc(memoriesCollectionRef, {
                text: newMemory,
                senderId: userId,
                timestamp: serverTimestamp(), // Firestore server timestamp
              });
              setNewMemory(''); // Clear input after adding
              console.log("Memory added successfully.");
            } catch (e) {
              console.error("Error adding memory: ", e);
              setError("Failed to add memory.");
            }
          };

          const generateDateIdea = () => {
            const randomIndex = Math.floor(Math.random() * dateIdeas.length);
            setCurrentDateIdea(dateIdeas[randomIndex]);
          };

          if (loading) {
            return (
              <div className="flex items-center justify-center min-h-screen bg-pink-50">
                <div className="text-lg font-semibold text-pink-700">Loading your romantic app...</div>
              </div>
            );
          }

          if (error) {
            return (
              <div className="flex items-center justify-center min-h-screen bg-red-100 text-red-700 p-4 rounded-lg shadow-md">
                <p>Error: {error}</p>
              </div>
            );
          }

          return (
            <div className="min-h-screen bg-gradient-to-br from-pink-100 to-red-100 flex flex-col items-center p-4 font-inter text-gray-800">
              <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-lg mt-8 transform transition-all duration-300 hover:scale-[1.01]">
                <h1 className="text-4xl font-extrabold text-center text-pink-700 mb-8 font-serif">Our Love Story</h1>

                <div className="mb-6 text-sm text-gray-600 text-center">
                  Your unique ID: <span className="font-mono bg-pink-50 p-1 rounded-md text-pink-600">{userId}</span>
                </div>

                {/* Date Idea Generator Section */}
                <div className="bg-pink-50 p-6 rounded-2xl shadow-inner mb-8 border border-pink-200">
                  <h2 className="text-2xl font-bold text-pink-600 mb-4 text-center">Date Idea Generator</h2>
                  <p className="text-center text-lg mb-4 italic">
                    {currentDateIdea || "Click below for a romantic date idea!"}
                  </p>
                  <button
                    onClick={generateDateIdea}
                    className="w-full bg-pink-500 text-white px-6 py-3 rounded-xl shadow-lg hover:bg-pink-600 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-pink-400"
                  >
                    Get a New Date Idea
                  </button>
                </div>

                {/* Memory Jar Section */}
                <div className="bg-red-50 p-6 rounded-2xl shadow-inner mb-8 border border-red-200">
                  <h2 className="text-2xl font-bold text-red-600 mb-4 text-center">Our Memory Jar</h2>
                  <div className="memory-list h-64 overflow-y-auto bg-white p-4 rounded-lg mb-4 border border-gray-200 shadow-inner">
                    {memories.length === 0 ? (
                      <p className="text-center text-gray-500 italic">No memories yet. Add your first special moment!</p>
                    ) : (
                      memories.map((memory) => (
                        <div
                          key={memory.id}
                          className={`flex mb-3 ${memory.senderId === userId ? 'justify-end' : 'justify-start'}`}
                        >
                          <div
                            className={`max-w-[80%] p-3 rounded-xl shadow-sm ${
                              memory.senderId === userId
                                ? 'bg-red-300 text-red-900 rounded-br-none'
                                : 'bg-pink-200 text-pink-900 rounded-bl-none'
                            }`}
                          >
                            <p className="text-sm break-words">{memory.text}</p>
                            <span className="block text-xs mt-1 text-gray-700 opacity-80">
                              {memory.senderId === userId ? 'You' : `Partner (${memory.senderId.substring(0, 4)}...)`}
                              {memory.timestamp && ` • ${new Date(memory.timestamp.toDate()).toLocaleDateString()} ${new Date(memory.timestamp.toDate()).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`}
                            </span>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                  <div className="flex gap-3">
                    <input
                      type="text"
                      className="flex-grow p-3 border border-red-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-400"
                      placeholder="Add a special memory..."
                      value={newMemory}
                      onChange={(e) => setNewMemory(e.target.value)}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          handleAddMemory();
                        }
                      }}
                    />
                    <button
                      onClick={handleAddMemory}
                      className="bg-red-500 text-white px-5 py-3 rounded-lg shadow-lg hover:bg-red-600 transition-all duration-200 ease-in-out transform hover:scale-105"
                    >
                      Add
                    </button>
                  </div>
                </div>
              </div>
            </div>
          );
        }

        // Render the React App component
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>